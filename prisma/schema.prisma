generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]

    // Optional for WebAuthn support
    Authenticator Authenticator[]
    role          Role            @default(user)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Post {
    id         String   @id @default(cuid())
    title      String
    slug       String   @unique
    content    String
    published  Boolean  @default(false)
    rating     Int      @default(0)
    updatedAt  DateTime @updatedAt @map("updated_at")
    createdAt  DateTime @default(now()) @map("created_at")
    authorId   String
    author     User     @relation(fields: [authorId], references: [id])
    Category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int
    Tags       Tag[]

    @@unique([title, content])
    @@index([slug])
}

model Tag {
    id    Int    @id @default(autoincrement())
    name  String @unique
    Posts Post[]
}

model Category {
    id    Int    @id @default(autoincrement())
    name  String @unique
    slug  String @unique
    posts Post[]

    @@index([slug])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

enum Role {
    user
    creator
    admin
}
